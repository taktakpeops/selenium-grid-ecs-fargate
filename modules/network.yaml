AWSTemplateFormatVersion: "2010-09-09"
Description: Grid Networking
Parameters:
  VpcCidrBlock:
    Description: "The CIDR block to be used for the VPC"
    Type: String
    Default: "10.0.0.0/24"
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,3})"
  Subnet1Cidr:
    Description: "The CIDR block to be used for the private subnet #1"
    Type: String
    Default: "10.0.0.0/26"
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,3})"
  Subnet1AvailabilityZone:
    Description: "The availability zone for the subnet #1"
    Type: "AWS::EC2::AvailabilityZone::Name"
    Default: "us-east-1a"
  Subnet2Cidr:
    Description: "The CIDR block to be used for the private subnet #2"
    Type: String
    Default: "10.0.0.192/26"
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,3})"
  Subnet2AvailabilityZone:
    Description: "The availability zone for the subnet #2"
    Type: "AWS::EC2::AvailabilityZone::Name"
    Default: "us-east-1a"
  Subnet3Cidr:
    Description: "The CIDR block to be used for the private subnet #3"
    Type: String
    Default: "10.0.0.128/26"
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,3})"
  Subnet3AvailabilityZone:
    Description: "The availability zone for the subnet #3"
    Type: "AWS::EC2::AvailabilityZone::Name"
    Default: "us-east-1b"
Resources:
  # VPC
  GridVpc:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsHostnames: true
      EnableDnsSupport: true
  # Route tables
  GridPrivateRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref GridVpc
  GridPublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref GridVpc
  # Private Subnet
  GridSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: !Ref Subnet1Cidr
      VpcId: !Ref GridVpc
      AvailabilityZone: !Ref Subnet1AvailabilityZone
  GridPrivateSubnet1Assoc:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref GridPrivateRouteTable
      SubnetId: !Ref GridSubnet1
  # Public Subnets
  GridSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: !Ref Subnet2Cidr
      VpcId: !Ref GridVpc
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Ref Subnet2AvailabilityZone
  GridSubnet2Assoc:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref GridPublicRouteTable
      SubnetId: !Ref GridSubnet2
  GridSubnet3:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: !Ref Subnet3Cidr
      VpcId: !Ref GridVpc
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Ref Subnet3AvailabilityZone
  GridSubnet3Assoc:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref GridPublicRouteTable
      SubnetId: !Ref GridSubnet3
  # Security group
  GridSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Security Group for the Talpa Account Selenium Grid"
      GroupName: GridSecurityGroup
      VpcId: !Ref GridVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 4444
          ToPort: 4444
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5555
          ToPort: 5555
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
  # Elastic IP
  GridEip:
    Type: AWS::EC2::EIP
    DependsOn: GridVpcIgPairing
    Properties:
      Domain: vpc
  # Gateways
  GridNatGateway:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt GridEip.AllocationId
      SubnetId: !Ref GridSubnet2
  GridNatRoute:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref GridPrivateRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref GridNatGateway
  GridInternetGateway:
    Type: "AWS::EC2::InternetGateway"
  GridInternetRoute:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref GridPublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref GridInternetGateway
  GridVpcIgPairing:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref GridInternetGateway
      VpcId: !Ref GridVpc
  # Load Balancer
  GridLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Name: SeleniumGrid
      IpAddressType: ipv4
      Scheme: "internet-facing"
      Type: application
      SecurityGroups:
        - !Ref GridSecurityGroup
      Subnets:
        - !Ref GridSubnet2
        - !Ref GridSubnet3
  GridHubGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    DependsOn: GridLoadBalancer
    Properties:
      Protocol: HTTP
      HealthCheckEnabled: true
      TargetType: ip
      Port: 4444
      VpcId: !Ref GridVpc
      HealthCheckIntervalSeconds: 10
      HealthCheckProtocol: HTTP
      HealthCheckPort: "4444"
      HealthCheckPath: /wd/hub/status
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
  GridHubListener:  
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref GridHubGroup
      LoadBalancerArn: !Ref GridLoadBalancer
      Protocol: HTTP
      Port: 4444
Outputs:
  GridVpc:
    Description: "Grid Vpc"
    Value: !Ref GridVpc
    Export:
      Name: GridVpc
  GridSubnet1:
    Description: "Grid subnet 1"
    Value: !Ref GridSubnet1
    Export:
      Name: GridSubnet1
  GridSubnet2:
    Description: "Grid subnet 2"
    Value: !Ref GridSubnet2
    Export:
      Name: GridSubnet2
  GridSubnet3:
    Description: "Grid subnet 3"
    Value: !Ref GridSubnet3
    Export:
      Name: GridSubnet3
  GridSecurityGroup:
    Description: "Security Group grid"
    Value: !Ref GridSecurityGroup
    Export:
      Name: GridSecurityGroup
  GridHubGroupArn:
    Description: "Grid load balancer group"
    Value: !Ref GridHubGroup
    Export:
      Name: GridHubGroupArn